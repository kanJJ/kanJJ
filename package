cdm→  componentDidMount: fn() { ... }
   cdup→  componentDidUpdate: fn(pp, ps) { ... }
     cs→  var cx = React.addons.classSet;
    cwm→  componentWillMount: fn() { ... }
    cwr→  componentWillReceiveProps: fn(np) { ... }
    cwu→  componentWillUpdate: fn(np, ns) { ... }
   cwun→  componentWillUnmount: fn() { ... }
     cx→  cx({ ... })
    fdn→  React.findDOMNode(...)
    fup→  forceUpdate(...)
    gdp→  getDefaultProps: fn() { return {...} }
    gis→  getInitialState: fn() { return {...} } 
    ism→  isMounted()
  props→  this.props.
     pt→  propTypes { ... }
    rcc→  component skeleton
   refs→  this.refs.
    ren→  render: fn() { return ... }
    scu→  shouldComponentUpdate: fn(np, ns) { ... }
    sst→  this.setState({ ... })
  state→  this.state.
  
  
  
  React-Router
Trigger    Description
link       react-router Link
iroute     Router.IndexRoute
ilink      Router.IndexLink
redirect   react-router Redirect
imrr       import react-router
route      Router.Route
router     Router.Route
Trigger Description
onbl    onBlur
onch    onChange
oncl    onClick
oncm    onContextMenu
onco    onCopy
onct    onCut
ondc    onDoubleClick
onde    onDragEnd
onden   onDragEnter
ondex   onDragExit
ondl    onDragLeave
ondo    onDragOver
onds    onDragStart
onfo    onFocus
ondr    onDrop
onin    onInput
onkd    onKeyDown
onkp    onKeyPress
onku    onKeyUp
onmd    onMouseDown
onme    onMouseEnter
onmm    onMouseMove
onml    onMouseLeave
onmo    onMouseOut
onmov   onMouseOver
onmu    onMouseUp
onpa    onPaste
onsc    onScroll
onsu    onSubmit
ontc    onTouchCancel
onte    onTouchEnd
ontm    onTouchMove
onts    onTouchStart
rwc     React withContext
onwh    onWheel


https://github.com/airbnb/javascript/tree/master/react#class-vs-reactcreateclass-vs-stateless
https://github.com/planningcenter/react-patterns

https://github.com/css-modules/css-modules
https://github.com/webpack-contrib/css-loader#local-scope


var webpack = require('webpack');
var HtmlwebpackPlugin = require('html-webpack-plugin');
var OpenBrowserPlugin = require('open-browser-webpack-plugin');

var path = require('path');
var ROOT_PATH = path.resolve(__dirname);
var SRC_PATH = path.resolve(ROOT_PATH, 'src');
var BUILD_PATH = path.resolve(ROOT_PATH, 'build');

module.exports = {

    entry: {
        index : SRC_PATH + '/index.js'
    },
  
    output: {
        path: BUILD_PATH,
        filename: 'main.js'
    },

    resolve:{
        extensions:[' ',  '.js', '.jsx']
    },

    module: {
        loaders: [
            { test: /\.(js|jsx)$/, exclude: /node_modules/, loader: 'babel-loader' },
            { test: /\.css$/, loader: 'style-loader!css-loader?modules' },
            { test: /\.less$/, loader: 'style-loader!css-loader!less-loader' },
            { test: /\.sass$/, loader: 'style-loader!css-loader!scss-loader' },
            { test: /\.style$/, loader: 'style-loader!css-loader' },
            { test: /\.(jpg|png|jpeg|gif|svg)$/, loader: "url-loader" },
            { test: /\.(woff|ttf)$/, loader: "file-loader" },
            { test: /\.(wav|mp3|mpeg|mp4|webm|ogv)$/, loader: "file-loader" },
            { test: /\.(json|json5)$/, loader: "json-loader" },
            { test: /\.txt$/, loader: "raw-loader" },
            { test: /\.(html|htm|md|markdown)$/, loader: "html-loader" }
        ]
    },

    plugins: [
        new HtmlwebpackPlugin({
            title: 'FX Alert',
            filename: 'index.html',
            favicon: ROOT_PATH + '/public/favicon.ico',
            template: ROOT_PATH + '/public/index.html',
            inject: 'body',
            hash: true,
            cache: false,
            showErrors: true,
            minify:{
                removeComments:true,
                collapseWhitespace:true
           },

        }),
        new OpenBrowserPlugin({
            url: 'http://localhost:3000',
            delay: 0,
            browser: 'chrome',
            ignoreErrors: false
        }),
        new webpack.ProvidePlugin({
            "React": "react",
            "ReactDOM": "react-dom"
        }),
    ]
};
